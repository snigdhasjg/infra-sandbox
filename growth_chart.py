#!/opt/homebrew/anaconda3/envs/clean-env/bin/python
from random import randint
from tkinter import *


def database():
    return {
        "BOY": {
            "height": [[49.8842, 1.8931],
                       [54.7244, 1.9465],
                       [58.4249, 2.0005],
                       [61.4292, 2.0444],
                       [63.886, 2.0808],
                       [65.9026, 2.1115],
                       [67.6236, 2.1403],
                       [69.1645, 2.1711],
                       [70.5994, 2.2055],
                       [71.9687, 2.2433],
                       [73.2812, 2.2849],
                       [74.5388, 2.3293],
                       [75.7488, 2.3762],
                       [76.9186, 2.426],
                       [78.0497, 2.4773],
                       [79.1458, 2.5303],
                       [80.2113, 2.5844],
                       [81.2487, 2.6406],
                       [82.2587, 2.6973],
                       [83.2418, 2.7553],
                       [84.1996, 2.814],
                       [85.1348, 2.8742],
                       [86.0477, 2.9342],
                       [86.941, 2.9951],
                       [87.8161, 3.0551],
                       [87.972, 3.116],
                       [88.8065, 3.1757],
                       [89.6197, 3.2353],
                       [90.412, 3.2928],
                       [91.1828, 3.3501],
                       [91.9327, 3.4052],
                       [92.6631, 3.4591],
                       [93.3753, 3.5118],
                       [94.0711, 3.5625],
                       [94.7532, 3.612],
                       [95.4236, 3.6604],
                       [96.0835, 3.7069],
                       [96.7337, 3.7523],
                       [97.3749, 3.7976],
                       [98.0073, 3.8409],
                       [98.631, 3.8831],
                       [99.2459, 3.9242],
                       [99.8515, 3.9651],
                       [100.4485, 4.0039],
                       [101.0374, 4.0435],
                       [101.6186, 4.081],
                       [102.1933, 4.1194],
                       [102.7625, 4.1567],
                       [103.3273, 4.1941],
                       [103.8886, 4.2314],
                       [104.4473, 4.2677],
                       [105.0041, 4.3052],
                       [105.5596, 4.3417],
                       [106.1138, 4.3783],
                       [106.6668, 4.4149],
                       [107.2188, 4.4517],
                       [107.7697, 4.4886],
                       [108.3198, 4.5245],
                       [108.8689, 4.5616],
                       [109.417, 4.5977],
                       [109.9638, 4.6339]],
            "weight": [[3.3464, 0.14602],
                       [4.4709, 0.13395],
                       [5.5675, 0.12385],
                       [6.3762, 0.11727],
                       [7.0023, 0.11316],
                       [7.5105, 0.1108],
                       [7.934, 0.10958],
                       [8.297, 0.10902],
                       [8.6151, 0.10882],
                       [8.9014, 0.10881],
                       [9.1649, 0.10891],
                       [9.4122, 0.10906],
                       [9.6479, 0.10925],
                       [9.8749, 0.10949],
                       [10.0953, 0.10976],
                       [10.3108, 0.11007],
                       [10.5228, 0.11041],
                       [10.7319, 0.11079],
                       [10.9385, 0.11119],
                       [11.143, 0.11164],
                       [11.3462, 0.11211],
                       [11.5486, 0.11261],
                       [11.7504, 0.11314],
                       [11.9514, 0.11369],
                       [12.1515, 0.11426],
                       [12.3502, 0.11485],
                       [12.5466, 0.11544],
                       [12.7401, 0.11604],
                       [12.9303, 0.11664],
                       [13.1169, 0.11723],
                       [13.3, 0.11781],
                       [13.4798, 0.11839],
                       [13.6567, 0.11896],
                       [13.8309, 0.11953],
                       [14.0031, 0.12008],
                       [14.1736, 0.12062],
                       [14.3429, 0.12116],
                       [14.5113, 0.12168],
                       [14.6791, 0.1222],
                       [14.8466, 0.12271],
                       [15.014, 0.12322],
                       [15.1813, 0.12373],
                       [15.3486, 0.12425],
                       [15.5158, 0.12478],
                       [15.6828, 0.12531],
                       [15.8497, 0.12586],
                       [16.0163, 0.12643],
                       [16.1827, 0.127],
                       [16.3489, 0.12759],
                       [16.515, 0.12819],
                       [16.6811, 0.1288],
                       [16.8471, 0.12943],
                       [17.0132, 0.13005],
                       [17.1792, 0.13069],
                       [17.3452, 0.13133],
                       [17.5111, 0.13197],
                       [17.6768, 0.13261],
                       [17.8422, 0.13325],
                       [18.0073, 0.13389],
                       [18.1722, 0.13453],
                       [18.3366, 0.13517]]
        },
        "GIRL": {
            "height": [[49.1477, 1.8627],
                       [53.6872, 1.9542],
                       [57.0673, 2.0362],
                       [59.8029, 2.1051],
                       [62.0899, 2.1645],
                       [64.0301, 2.2174],
                       [65.7311, 2.2664],
                       [67.2873, 2.3154],
                       [68.7498, 2.365],
                       [70.1435, 2.4157],
                       [71.4818, 2.4676],
                       [72.771, 2.5208],
                       [74.015, 2.575],
                       [75.2176, 2.6296],
                       [76.3817, 2.6841],
                       [77.5099, 2.7392],
                       [78.6055, 2.7944],
                       [79.671, 2.849],
                       [80.7079, 2.9039],
                       [81.7182, 2.9582],
                       [82.7036, 3.0129],
                       [83.6654, 3.0672],
                       [84.604, 3.1202],
                       [85.5202, 3.1737],
                       [86.4153, 3.2267],
                       [86.5904, 3.2783],
                       [87.4462, 3.33],
                       [88.283, 3.3812],
                       [89.1004, 3.4313],
                       [89.8991, 3.4809],
                       [90.6797, 3.5302],
                       [91.443, 3.5782],
                       [92.1906, 3.6259],
                       [92.9239, 3.6724],
                       [93.6444, 3.7186],
                       [94.3533, 3.7638],
                       [95.0515, 3.8078],
                       [95.7399, 3.8526],
                       [96.4187, 3.8963],
                       [97.0885, 3.9389],
                       [97.7493, 3.9813],
                       [98.4015, 4.0236],
                       [99.0448, 4.0658],
                       [99.6795, 4.1068],
                       [100.3058, 4.1476],
                       [100.9238, 4.1883],
                       [101.5337, 4.2279],
                       [102.136, 4.2683],
                       [102.7312, 4.3075],
                       [103.3197, 4.3456],
                       [103.9021, 4.3847],
                       [104.4786, 4.4226],
                       [105.0494, 4.4604],
                       [105.6148, 4.4981],
                       [106.1748, 4.5358],
                       [106.7295, 4.5734],
                       [107.2788, 4.6108],
                       [107.8227, 4.6472],
                       [108.3613, 4.6834],
                       [108.8948, 4.7195],
                       [109.4233, 4.7566]],
            "weight": [[3.2322, 0.14171],
                       [4.1873, 0.13724],
                       [5.1282, 0.13],
                       [5.8458, 0.12619],
                       [6.4237, 0.12402],
                       [6.8985, 0.12274],
                       [7.297, 0.12204],
                       [7.6422, 0.12178],
                       [7.9487, 0.12181],
                       [8.2254, 0.12199],
                       [8.48, 0.12223],
                       [8.7192, 0.12247],
                       [8.9481, 0.12268],
                       [9.1699, 0.12283],
                       [9.387, 0.12294],
                       [9.6008, 0.12299],
                       [9.8124, 0.12303],
                       [10.0226, 0.12306],
                       [10.2315, 0.12309],
                       [10.4393, 0.12315],
                       [10.6464, 0.12323],
                       [10.8534, 0.12335],
                       [11.0608, 0.1235],
                       [11.2688, 0.12369],
                       [11.4775, 0.1239],
                       [11.6864, 0.12414],
                       [11.8947, 0.12441],
                       [12.1015, 0.12472],
                       [12.3059, 0.12506],
                       [12.5073, 0.12545],
                       [12.7055, 0.12587],
                       [12.9006, 0.12633],
                       [13.093, 0.12683],
                       [13.2837, 0.12737],
                       [13.4731, 0.12794],
                       [13.6618, 0.12855],
                       [13.8503, 0.12919],
                       [14.0385, 0.12988],
                       [14.2265, 0.13059],
                       [14.414, 0.13135],
                       [14.601, 0.13213],
                       [14.7873, 0.13293],
                       [14.9727, 0.13376],
                       [15.1573, 0.1346],
                       [15.341, 0.13545],
                       [15.524, 0.1363],
                       [15.7064, 0.13716],
                       [15.8882, 0.138],
                       [16.0697, 0.13884],
                       [16.2511, 0.13968],
                       [16.4322, 0.14051],
                       [16.6133, 0.14132],
                       [16.7942, 0.14213],
                       [16.9748, 0.14293],
                       [17.1551, 0.14371],
                       [17.3347, 0.14448],
                       [17.5136, 0.14525],
                       [17.6916, 0.146],
                       [17.8686, 0.14675],
                       [18.0445, 0.14748],
                       [18.2193, 0.14821]]
        }
    }


def take_input():
    data = database()
    gui = Tk()
    gui.geometry("600x300")
    gui.title("WHO ideal height and weight finder")

    gender_label = Label(gui, text="Gender: ", width=20, font=("bold", 15))
    gender_label.grid(row=0, columnspan=5, ipadx=2)
    gender = StringVar(gui, "BOY")
    gender_menu = OptionMenu(gui, gender, "BOY", "GIRL")
    gender_menu.grid(row=0, column=7)

    age = IntVar(gui)
    age_year = IntVar(gui)
    age_month = IntVar(gui)
    random_height = DoubleVar(gui)
    random_weight = DoubleVar(gui)

    def clear():
        age.set("")
        age_year.set("")
        age_month.set("")
        random_height.set("")
        random_weight.set("")

    clear()

    age_label = Label(gui, text="Age: ", width=20, font=("bold", 15))
    age_label.grid(row=1, columnspan=5, ipadx=2)
    age_field = Message(gui, textvariable=age)
    age_field.grid(row=1, column=7)

    age_year_label = Label(gui, text="Year: ", width=20, font=("bold", 15))
    age_year_label.grid(row=2, columnspan=5, ipadx=2)
    age_year_entry = Entry(gui, textvariable=age_year)
    age_year_entry.grid(row=2, column=7)

    age_month_label = Label(gui, text="Month: ", width=20, font=("bold", 15))
    age_month_label.grid(row=3, columnspan=5, ipadx=2)
    age_month_entry = Entry(gui, textvariable=age_month)
    age_month_entry.grid(row=3, column=7)

    def random():
        age.set(age_year.get() * 12 + age_month.get())
        gender_data = data.get(gender.get())
        height_mean = gender_data.get("height")[age.get()][0]
        height_std = gender_data.get("height")[age.get()][1]
        random_height.set(round(height_mean + (randint(-100, 100) * height_std / 100), 2))
        weight_mean = gender_data.get("weight")[age.get()][0]
        weight_std = gender_data.get("weight")[age.get()][1]
        random_weight.set(round(weight_mean + (randint(-100, 100) * weight_std / 100), 2))

    random_button = Button(gui, text='Random', fg='black', bg='red', command=random, height=1, width=7)
    random_button.grid(row=4, column=7)
    clear_button = Button(gui, text='(X)', fg='black', bg='red', command=clear, height=1, width=7)
    clear_button.grid(row=4, column=3)

    random_height_label = Label(gui, text="Height: ", width=20, font=("bold", 15))
    random_height_label.grid(row=6, columnspan=4, ipadx=2)
    random_height_field = Message(gui, textvariable=random_height)
    random_height_field.grid(row=6, column=6, columnspan=2)

    random_weight_label = Label(gui, text="Weight: ", width=20, font=("bold", 15))
    random_weight_label.grid(row=7, columnspan=4, ipadx=2)
    random_weight_field = Message(gui, textvariable=random_weight)
    random_weight_field.grid(row=7, column=6, columnspan=2)

    mainloop()


if __name__ == '__main__':
    take_input()
